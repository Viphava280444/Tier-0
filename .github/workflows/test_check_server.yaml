name: Server Status Checker

# GLOBAL CONFIGURATION
env:
  ALLOWED_SERVERS: "vocms047,vocms05011,vocms05012"

on:
  issue_comment:
    types: [created]

jobs:
  check-server-status:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/check-servers')
    runs-on: cmst0
    
    steps:
    - name: Authenticate with Kerberos
      id: kerberos
      run: |
        kinit cmst0@CERN.CH -k -t /home/cmsbld/cmst0.keytab
        echo "Kerberos authentication successful"

    - name: Check all servers status
      id: check_all_servers
      run: |
        echo "=== Checking status of all servers ==="
        
        EMPTY_SERVERS=()
        BUSY_SERVERS=()
        ERROR_SERVERS=()
        
        IFS=',' read -ra SERVERS <<< "${{ env.ALLOWED_SERVERS }}"
        
        for server_raw in "${SERVERS[@]}"; do
          server=$(echo $server_raw | tr -d ' ')
          echo "Checking server: $server"
          
          SERVER_STATUS=$(ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -K cmst0@${server}.cern.ch bash -s << 'SERVER_CHECK'
            source env.sh 2>/dev/null || echo "WARNING: env.sh not found"
            
            if command -v condor_q >/dev/null 2>&1; then
              RUNNING_JOBS=$(condor_q -nobatch -format "%s\n" ClusterId 2>/dev/null | wc -l)
              if [ $? -eq 0 ]; then
                echo "SUCCESS:$RUNNING_JOBS"
                
                if [ "$RUNNING_JOBS" -gt 0 ]; then
                  echo "JOBS_DETAIL:"
                  condor_q -nobatch -format "JobId: %s, " ClusterId -format "Owner: %s, " Owner -format "Status: %s\n" JobStatus 2>/dev/null | head -10
                  echo "JOBS_SUMMARY:"
                  condor_q -totals 2>/dev/null
                fi
              else
                echo "ERROR:condor_q_failed"
              fi
            else
              echo "ERROR:condor_not_available"
            fi
        SERVER_CHECK
        2>&1)
          
          if echo "$SERVER_STATUS" | grep -q "^SUCCESS:"; then
            JOB_COUNT=$(echo "$SERVER_STATUS" | grep "^SUCCESS:" | cut -d':' -f2)
            
            if [ "$JOB_COUNT" -eq 0 ]; then
              EMPTY_SERVERS+=("$server")
            else
              BUSY_SERVERS+=("$server:$JOB_COUNT")
            fi
          else
            ERROR_SERVERS+=("$server")
          fi
          
          echo "Server $server checked"
        done
        
        TOTAL_SERVERS=${#SERVERS[@]}
        EMPTY_COUNT=${#EMPTY_SERVERS[@]}
        BUSY_COUNT=${#BUSY_SERVERS[@]}
        ERROR_COUNT=${#ERROR_SERVERS[@]}
        
        echo "EMPTY_SERVERS=${EMPTY_SERVERS[*]}" >> $GITHUB_ENV
        echo "BUSY_SERVERS=${BUSY_SERVERS[*]}" >> $GITHUB_ENV
        echo "ERROR_SERVERS=${ERROR_SERVERS[*]}" >> $GITHUB_ENV
        echo "EMPTY_COUNT=$EMPTY_COUNT" >> $GITHUB_ENV
        echo "BUSY_COUNT=$BUSY_COUNT" >> $GITHUB_ENV
        echo "ERROR_COUNT=$ERROR_COUNT" >> $GITHUB_ENV
        echo "TOTAL_SERVERS=$TOTAL_SERVERS" >> $GITHUB_ENV

    - name: Post server status report
      if: always()
      run: |
        
        STATUS_LINES=""
        
        for server in $EMPTY_SERVERS; do
          STATUS_LINES="${STATUS_LINES}üü¢ **${server}** - Empty (0 jobs)
        "
        done
        
        for server_info in $BUSY_SERVERS; do
          server=$(echo $server_info | cut -d':' -f1)
          jobs=$(echo $server_info | cut -d':' -f2)
          STATUS_LINES="${STATUS_LINES}üî¥ **${server}** - ${jobs} jobs running
        "
        done
        
        for server in $ERROR_SERVERS; do
          STATUS_LINES="${STATUS_LINES}‚ö†Ô∏è **${server}** - ‚ùå Connection/Service Error
        "
        done
        
        RECOMMENDATIONS=""
        if [ "$EMPTY_COUNT" -gt 0 ]; then
          RECOMMENDATIONS="üéØ **Deployment Recommendations:**

        Available servers for deployment:"
          for server in $EMPTY_SERVERS; do
            RECOMMENDATIONS="${RECOMMENDATIONS}
        ‚úÖ **${server}** is ready for deployment"
          done
          
          RECOMMENDATIONS="${RECOMMENDATIONS}


        else
          RECOMMENDATIONS="‚ö†Ô∏è **No servers currently available for deployment**"
        fi
        
        COMMENT="üìã **Server Status Report**

        üìä **Summary:** ${EMPTY_COUNT} empty, ${BUSY_COUNT} busy, ${ERROR_COUNT} errors (of ${TOTAL_SERVERS} total)

        **Detailed Status:**
        ${STATUS_LINES}
        ${RECOMMENDATIONS}

        ---"

        curl -X POST \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
          -d "$(jq -n --arg body "$COMMENT" '{body: $body}')"

    - name: Post failure comment
      if: failure()
      run: |
        COMMENT="‚ùå **Server Status Check Failed**
        
        There was an error while checking server status.
        
        [View detailed logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for troubleshooting.
        
        Try running \`/check-servers\` again in a few minutes."
        
        curl -X POST \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
          -d "$(jq -n --arg body "$COMMENT" '{body: $body}')"