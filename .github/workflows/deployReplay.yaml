name: Pipeline for deploy the replay

on:
  # push:
  #   branches: [ "Pipeline" ]
  workflow_dispatch:          
    inputs:                  
      message1:               
        description: 'URL to download with wget'
        required: true         
        default: 'https://raw.githubusercontent.com/dmwm/T0/refs/heads/master/etc/ReplayOfflineConfiguration.py'

      Replay:
        description: 'Choose the Replay'
        required: true
        type: choice
        options:
        - 'vocms047'
        - 'vocms0500'
        default: 'vocms0500'

      Patch:
        description: 'Choose one option to patch'
        required: true
        type: choice
        options:
        - 'Patch'
        - 'No Patch'
        default: 'No Patch'

      message5:
        description: 'Providing the commit number if it need to patch. (5000, 5001)'
        required: false        
        default: '5081'

      message2:               
        description: 'WMCORE Version'
        required: false        
        default: '2.4.2rc7'

      message3:               
        description: 'T0 Version'
        required: false        
        default: '3.5.1'

      message4:               
        description: 'Python Version'
        required: false        
        default: '3.12'

    
jobs:
  deploy-the-replay:
    runs-on: cmst0
    
    steps:

    
    - name: Access to virtual machine and run the script
      env:
        SERVER1_HOST: ${{ secrets.SERVER1_HOST }}
        SERVER1_USER: ${{ secrets.SERVER1_USER }}
        SERVER1_PASS: ${{ secrets.SERVER1_PASS }}
        SERVER2_HOST: ${{ secrets.SERVER2_HOST }}
        SERVER2_USER: ${{ secrets.SERVER2_USER }}
        SERVER2_PASS: ${{ secrets.SERVER2_PASS }}
        WGET_URL: ${{ github.event.inputs.message1 }} 
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}  
        PATCH_OPTION: ${{ github.event.inputs.Patch }}        
        PATCH_URL: ${{ github.event.inputs.message5 }}
        WMCORE_VERSION : ${{ github.event.inputs.message2 }}
        T0_VERSION : ${{ github.event.inputs.message3 }}
        PYTHON_VERSION : ${{ github.event.inputs.message4 }}

      run: |
       
        expect << 'EOF'

        # spawn ssh -o StrictHostKeyChecking=no $env(SERVER1_USER)@$env(SERVER1_HOST)
        # expect "*assword*"

        # send "$env(SERVER1_PASS)\r"
        # expect -re {.*\$\s*} { }

        # send "ssh -o StrictHostKeyChecking=no $env(SERVER2_USER)@$env(SERVER2_HOST)\r"
        # expect "*assword*"

        # send "$env(SERVER2_PASS)\r"
        # expect -re {.*\$\s*} { }

        # spawn "echo 'Connected to Server2'"
        # expect -re {.*\$\s*} { }

        set timeout 1800
        spawn kinit cmst0@CERN.CH -k -t /home/cmsbld/cmst0.keytab
        spawn ssh  -o StrictHostKeyChecking=no -K cmst0@$env(REPLAY_OPTION).cern.ch
        
        # Wait for initial prompt - handle bracketed paste sequences
        expect {
            -re {\[\\?2004[hl]} { exp_continue }
            -re {.*\$\s*} { }
        }

        # Disable bracketed paste mode immediately after connection
        send "printf '\\033\[?2004l'\r"
        expect {
            -re {\[\\?2004[hl]} { exp_continue }
            -re {\$\s*} { }
        }

        send "export PS1='$ '\r"
        expect -re {\$\s*} { }

        send "unset PROMPT_COMMAND\r"
        expect -re {\$\s*} { }

        send "stty -echo\r"
        expect -re {\$\s*} { }

        send "echo 'Terminal environment cleaned up'\r"
        expect -re {\$\s*} { }

        send "ll\r"
        expect -re {.*\$\s*} { }

        send "source env.sh\r"
        expect -re {.*\$\s*} { }

        send "cd /data/tier0/ReplayPipeline\r"
        expect -re {.*\$\s*} { }

        send "rm -f ReplayOfflineConfiguration.py\r"
        expect -re {.*\$\s*} { }

        send "wget '$env(WGET_URL)'\r"
        expect -re {.*\$\s*} { }

        send "CONFIG_FILE=\$(ls *ReplayOfflineConfiguration.py 2>/dev/null | head -1)\r"
        expect -re {.*\$\s*} { }

        send "if \[ ! -z \"\$CONFIG_FILE\" \] && \[ \"\$CONFIG_FILE\" != \"ReplayOfflineConfiguration.py\" \]; then echo \"Renaming \$CONFIG_FILE to ReplayOfflineConfiguration.py\"; mv \"\$CONFIG_FILE\" \"ReplayOfflineConfiguration.py\"; else echo 'Configuration file already named correctly or not found'; fi\r"
        expect -re {.*\$\s*} { }

        send "condor_rm -all\r"
        expect -re {.*\$\s*} { }

        send "stop_agent\r"
        expect -re {.*\$\s*} { }

        send "rm -f /data/tier0/admin/ReplayOfflineConfiguration.py\r"
        expect -re {.*\$\s*} { }

        send "SRC_FILE=/data/tier0/ReplayPipeline/ReplayOfflineConfiguration.py\r"
        expect -re {.*\$\s*} { }

        send "DEST_FILE=/data/tier0/admin/ReplayOfflineConfiguration.py\r"
        expect -re {.*\$\s*} { }

        send "cp \$SRC_FILE \$DEST_FILE\r"
        expect {
            -re {.*\$\s*} { } 
            timeout { puts "Timeout during file copy"; exit 1 }
        }

        send "export WMAGENT_TAG_VAR='$env(WMCORE_VERSION)'\r"
        expect -re {.*\$\s*} { }

        send "export TIER0_VERSION_VAR='$env(T0_VERSION)'\r"
        expect -re {.*\$\s*} { }

        send "export PYTHON_VERSION_VAR='$env(PYTHON_VERSION)'\r"
        expect -re {.*\$\s*} { }

        send "source /data/tier0/ReplayPipeline/00_pypi_deploy_replay.sh\r"
        expect "*Are you sure you wish to continue? (Y/n)*"

        send "Y\r"
        expect -re {.*\$\s*} { }

        send "echo 'About to execute patch logic...'\r"
        expect -re {.*\$\s*} { }

        send "if \[ \"$env(PATCH_OPTION)\" = \"Patch\" \]; then echo 'Applying patches...'; IFS=',' read -ra PATCHES <<< '$env(PATCH_URL)'; for patch_num in \"\${PATCHES\[@\]\}\"; do patch_num=\$(echo \$patch_num | tr -d ' '); echo \"Applying patch PR #\$patch_num\"; curl https://patch-diff.githubusercontent.com/raw/dmwm/T0/pull/\${patch_num}.patch | patch -f -d /data/tier0/WMAgent.venv3/lib/python$env(PYTHON_VERSION)/site-packages/ -p 3; echo \"Patch \$patch_num applied\"; done; else echo 'No patch requested, skipping...'; fi\r"
        expect -re {.*\$\s*} { }

        send "echo 'Patch logic completed, exit code: '\$?\r"
        expect -re {.*\$\s*} { }

        send "echo 'Starting replace the new configuration file....'\r"
        expect -re {.*\$\s*} { }

        send "cp /data/tier0/ReplayPipeline/checkProxy.py /data/tier0/WMAgent.venv3/deploy/checkProxy.py\r"
        expect -re {.*\$\s*} { }

        send "source /data/tier0/00_pypi_start_agent.sh\r"
        
        # Give more time for agent to start and handle multiple output lines
        set timeout 120
        expect {
            -re {\[\\?2004[hl]} { exp_continue }
            -re {Component .* started} { exp_continue }
            -re {.*\$\s*} { }
            timeout {
                send "\r"
                expect -re {.*\$\s*} { }
            }
        }

        send "echo 'Agent started, now monitoring logs...'\r"
        expect {
            -re {\[\\?2004[hl]} { exp_continue }
            -re {.*\$\s*} { }
        }

        # Changed from 'timeout 600 tail -f' to run in background and wait
        send "timeout 600 tail -f /data/tier0/WMAgent.venv3/srv/wmagent/$env(WMCORE_VERSION)/install/Tier0Feeder/ComponentLog &\r"
        expect -re {.*\$\s*} { }
        
        # Let it run for 30 seconds then stop it
        send "sleep 30\r"
        set timeout 35
        expect -re {.*\$\s*} { }
        
        # Kill the background tail process
        send "pkill -f 'tail -f.*ComponentLog' 2>/dev/null || true\r"
        expect -re {.*\$\s*} { }
        
        send "echo 'Log monitoring completed'\r"
        expect -re {.*\$\s*} { }
        
        send "echo 'Pipeline execution finished successfully'\r"
        expect -re {.*\$\s*} { }

        EOF