name: Pipeline for deploy the replay

on:
  workflow_dispatch:          
    inputs:                  
      message1:               
        description: 'URL to download with wget'
        required: true         
        default: 'https://raw.githubusercontent.com/dmwm/T0/refs/heads/master/etc/ReplayOfflineConfiguration.py'

      Replay:
        description: 'Choose the Replay'
        required: true
        type: choice
        options:
        - 'vocms047'
        - 'vocms0500'
        default: 'vocms0500'

      Patch:
        description: 'Choose one option to patch'
        required: true
        type: choice
        options:
        - 'Patch'
        - 'No Patch'
        default: 'No Patch'

      message5:
        description: 'Providing the commit number if it need to patch. (5000, 5001)'
        required: false        
        default: '5081'

      message2:               
        description: 'WMCORE Version'
        required: false        
        default: '2.4.2rc7'

      message3:               
        description: 'T0 Version'
        required: false        
        default: '3.5.1'

      message4:               
        description: 'Python Version'
        required: false        
        default: '3.12'

jobs:
  deploy-the-replay:
    runs-on: cmst0
    
    steps:
    - name: Authenticate with Kerberos
      run: |
        kinit cmst0@CERN.CH -k -t /home/cmsbld/cmst0.keytab
        echo "Kerberos authentication successful"

    - name: Step 1 - Clean and prepare environment
      env:
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}
      run: |
        echo "=== Step 1: Cleaning environment on ${REPLAY_OPTION} ==="
        
        ssh -o StrictHostKeyChecking=no -K cmst0@${REPLAY_OPTION}.cern.ch << 'STEP1'
        # Disable bracketed paste mode
        printf '\033[?2004l'
        export PS1='$ '
        unset PROMPT_COMMAND
        stty -echo 2>/dev/null || true
        
        echo "Terminal environment cleaned up"
        
        # Source environment
        source env.sh
        
        # Stop any existing processes
        echo "Stopping existing processes..."
        condor_rm -all 2>/dev/null || true
        stop_agent 2>/dev/null || true
        
        echo "Environment preparation completed"
        STEP1

    - name: Step 2 - Download and setup configuration
      env:
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}
        WGET_URL: ${{ github.event.inputs.message1 }}
      run: |
        echo "=== Step 2: Downloading configuration ==="
        
        ssh -o StrictHostKeyChecking=no -K cmst0@${REPLAY_OPTION}.cern.ch << STEP2
        source env.sh
        cd /data/tier0/ReplayPipeline
        
        # List current directory
        echo "Current directory contents:"
        ll
        
        # Download configuration
        echo "Downloading configuration from: ${WGET_URL}"
        rm -f ReplayOfflineConfiguration.py
        wget "${WGET_URL}"
        
        # Rename if necessary
        CONFIG_FILE=\$(ls *ReplayOfflineConfiguration.py 2>/dev/null | head -1)
        if [ ! -z "\$CONFIG_FILE" ] && [ "\$CONFIG_FILE" != "ReplayOfflineConfiguration.py" ]; then
            echo "Renaming \$CONFIG_FILE to ReplayOfflineConfiguration.py"
            mv "\$CONFIG_FILE" "ReplayOfflineConfiguration.py"
        else
            echo "Configuration file already named correctly or not found"
        fi
        
        # Copy to admin directory
        echo "Copying configuration to admin directory..."
        rm -f /data/tier0/admin/ReplayOfflineConfiguration.py
        cp /data/tier0/ReplayPipeline/ReplayOfflineConfiguration.py /data/tier0/admin/ReplayOfflineConfiguration.py
        
        echo "Configuration setup completed"
        STEP2

    - name: Step 3 - Deploy WMAgent
      env:
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}
        WMCORE_VERSION: ${{ github.event.inputs.message2 }}
        T0_VERSION: ${{ github.event.inputs.message3 }}
        PYTHON_VERSION: ${{ github.event.inputs.message4 }}
      run: |
        echo "=== Step 3: Deploying WMAgent ==="
        
        ssh -o StrictHostKeyChecking=no -K cmst0@${REPLAY_OPTION}.cern.ch << STEP3
        source env.sh
        cd /data/tier0/ReplayPipeline
        
        # Set environment variables
        export WMAGENT_TAG_VAR="${WMCORE_VERSION}"
        export TIER0_VERSION_VAR="${T0_VERSION}"
        export PYTHON_VERSION_VAR="${PYTHON_VERSION}"
        
        echo "Environment variables set:"
        echo "  WMAGENT_TAG_VAR=${WMCORE_VERSION}"
        echo "  TIER0_VERSION_VAR=${T0_VERSION}"
        echo "  PYTHON_VERSION_VAR=${PYTHON_VERSION}"
        
        # Deploy with automatic Y response
        echo "Starting deployment..."
        echo "Y" | source /data/tier0/ReplayPipeline/00_pypi_deploy_replay.sh
        
        echo "Deployment completed"
        STEP3

    - name: Step 4 - Apply patches (if requested)
      env:
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}
        PATCH_OPTION: ${{ github.event.inputs.Patch }}
        PATCH_URL: ${{ github.event.inputs.message5 }}
        PYTHON_VERSION: ${{ github.event.inputs.message4 }}
      run: |
        echo "=== Step 4: Patch application ==="
        
        if [ "${PATCH_OPTION}" = "Patch" ]; then
          echo "Patches requested, applying..."
          
          ssh -o StrictHostKeyChecking=no -K cmst0@${REPLAY_OPTION}.cern.ch << STEP4
          source env.sh
          
          echo "About to execute patch logic..."
          echo "Applying patches: ${PATCH_URL}"
          
          IFS=',' read -ra PATCHES <<< "${PATCH_URL}"
          for patch_num in "\${PATCHES[@]}"; do
              patch_num=\$(echo \$patch_num | tr -d ' ')
              echo "Applying patch PR #\$patch_num"
              
              curl -L "https://patch-diff.githubusercontent.com/raw/dmwm/T0/pull/\${patch_num}.patch" | \
                  patch -f -d "/data/tier0/WMAgent.venv3/lib/python${PYTHON_VERSION}/site-packages/" -p 3
              
              if [ \$? -eq 0 ]; then
                  echo "Patch \$patch_num applied successfully"
              else
                  echo "Warning: Patch \$patch_num may have failed"
              fi
          done
          
          echo "All patches processed"
        STEP4
        else
          echo "No patches requested, skipping..."
        fi

    - name: Step 5 - Start agent and finalize
      env:
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}
        WMCORE_VERSION: ${{ github.event.inputs.message2 }}
      run: |
        echo "=== Step 5: Starting agent ==="
        
        ssh -o StrictHostKeyChecking=no -K cmst0@${REPLAY_OPTION}.cern.ch << STEP5
        source env.sh
        
        echo "Starting replace the new configuration file...."
        cp /data/tier0/ReplayPipeline/checkProxy.py /data/tier0/WMAgent.venv3/deploy/checkProxy.py
        
        echo "Starting WMAgent..."
        source /data/tier0/00_pypi_start_agent.sh
        
        echo "Agent started, waiting for stabilization..."
        sleep 10
        
        echo "Checking agent status..."
        manage status || true
        
        echo "Agent started successfully"
        STEP5

    - name: Step 6 - Monitor logs
      env:
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}
        WMCORE_VERSION: ${{ github.event.inputs.message2 }}
      run: |
        echo "=== Step 6: Monitoring logs ==="
        
        ssh -o StrictHostKeyChecking=no -K cmst0@${REPLAY_OPTION}.cern.ch << STEP6
        source env.sh
        
        echo "Agent started, now monitoring logs..."
        
        # Monitor logs for 30 seconds (instead of 600)
        echo "Monitoring Tier0Feeder logs for 30 seconds..."
        timeout 30 tail -f /data/tier0/WMAgent.venv3/srv/wmagent/${WMCORE_VERSION}/install/Tier0Feeder/ComponentLog 2>/dev/null || true
        
        echo "Log monitoring completed"
        
        # Final status check
        echo "Final agent status:"
        manage status || true
        
        echo "Pipeline execution finished successfully"
        STEP6

    - name: Summary
      env:
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}
      run: |
        echo "========================================="
        echo "Deployment Summary:"
        echo "  Server: ${REPLAY_OPTION}"
        echo "  Status: Completed"
        echo "========================================="