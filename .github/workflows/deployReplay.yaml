name: Pipeline for deploy the replay

on:
  # push:
  #   branches: [ "Pipeline" ]
  workflow_dispatch:          
    inputs:                  
      message1:               
        description: 'URL to download with wget'
        required: true         
        default: 'https://raw.githubusercontent.com/dmwm/T0/refs/heads/master/etc/ReplayOfflineConfiguration.py'

      message2:               
        description: 'WMCORE Version'
        required: false        
        default: '2.4.0'

      message3:               
        description: 'T0 Version'
        required: false        
        default: '3.4.0'

      message4:               
        description: 'Python Version'
        required: false        
        default: '3.12'

      Patch:
        description: 'Choose one option to patch'
        required: true
        type: choice
        options:
        - 'Patch'
        - 'No Patch'
        default: 'No Patch'

      message5:
        description: 'Providing the commit number if it need to patch. (5000, 5001)'
        required: false        
        default: '5081'

      Replay:
        description: 'Choose the Replay'
        required: true
        type: choice
        options:
        - 'vocms047'
        - 'vocms0500'
        default: 'vocms047'
      
jobs:
  deploy-the-replay:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Install tools
      run: sudo apt-get update && sudo apt-get install -y expect
    
    - name: Access to virtual machine and run the script
      env:
        SERVER1_HOST: ${{ secrets.SERVER1_HOST }}
        SERVER1_USER: ${{ secrets.SERVER1_USER }}
        SERVER1_PASS: ${{ secrets.SERVER1_PASS }}
        SERVER2_HOST: ${{ secrets.SERVER2_HOST }}
        SERVER2_USER: ${{ secrets.SERVER2_USER }}
        SERVER2_PASS: ${{ secrets.SERVER2_PASS }}
        WGET_URL: ${{ github.event.inputs.message1 }} 
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}  
        PATCH_OPTION: ${{ github.event.inputs.Patch }}        
        PATCH_URL: ${{ github.event.inputs.message5 }}
        WMCORE_VERSION : ${{ github.event.inputs.message2 }}
        T0_VERSION : ${{ github.event.inputs.message3 }}
        PYTHON_VERSION : ${{ github.event.inputs.message4 }}


      run: |
        # Method 1: Use expect to handle SSH password prompts
        expect << 'EOF'

        set timeout 1800

        spawn ssh -o StrictHostKeyChecking=no $env(SERVER1_USER)@$env(SERVER1_HOST)
        expect "*assword*"

        send "$env(SERVER1_PASS)\r"
        expect "$ "

        send "ssh -o StrictHostKeyChecking=no $env(SERVER2_USER)@$env(SERVER2_HOST)\r"
        expect "*assword*"

        send "$env(SERVER2_PASS)\r"
        expect "$ "

        send "echo 'Connected to Server2' && hostname\r"
        expect "$ "

        send "alias\r"
        expect "$ "

        send "$env(REPLAY_OPTION)\r"
        expect "$ "

        send "source env.sh\r"
        expect "$ "

        send "cd /data/tier0/ReplayPipeline\r"
        expect "$ "

        send "rm -f ReplayOfflineConfiguration.py\r"
        expect "$ "

        send "wget '$env(WGET_URL)'\r"
        expect "$ "

        send "CONFIG_FILE=\$(ls *ReplayOfflineConfiguration.py 2>/dev/null | head -1)\r"
        expect "$ "
        
        send "if [ ! -z \"\\$CONFIG_FILE\" ] && [ \"\\$CONFIG_FILE\" != \"ReplayOfflineConfiguration.py\" ]; then\r"
        expect "$ "
        
        send "echo \"Renaming \\$CONFIG_FILE to ReplayOfflineConfiguration.py\"\r"
        expect "$ "
        
        send "mv \"\\$CONFIG_FILE\" \"ReplayOfflineConfiguration.py\"\r"
        expect "$ "
        
        send "else\r"
        expect "$ "
        
        send "echo 'Configuration file already named correctly or not found'\r"
        expect "$ "
        
        send "fi\r"
        expect "$ "

        send "ll\r"
        expect "$ "

        send "condor_rm -all\r"
        expect "$ "

        send "stop_agent\r"
        expect "$ "

        if {[string equal $env(PATCH_OPTION) "Patch"]} {
            send "echo 'Applying patches...'\r"
            expect "$ "
            
            # Split the patch numbers and apply each one
            send "IFS=',' read -ra PATCHES <<< '$env(PATCH_URL)'\r"
            expect "$ "
            
            send "for patch_num in \"\${PATCHES\[@\]\}\"; do\r"
            expect "$ "
            
            send "  patch_num=\\$(echo \\$patch_num | tr -d ' ')\r"
            expect "$ "
            
            send "  echo \"Applying patch PR #\\$patch_num\"\r"
            expect "$ "
            
            send "  curl https://patch-diff.githubusercontent.com/raw/dmwm/T0/pull/\\${patch_num}.patch | patch -f -d \$WMA_DEPLOY_DIR/lib/python$env(PYTHON_VERSION)/site-packages/ -p 3\r"
            expect "$ "
            
            send "  echo \"Patch \\$patch_num downloaded\"\r"
            expect "$ "
            
            send "done\r"
            expect "$ "
            
        } else {
            send "echo 'No patch requested, skipping...'\r"
            expect "$ "
        }

        send "rm -f /data/tier0/admin/ReplayOfflineConfiguration.py\r"
        expect "$ "

        send "SRC_FILE=/data/tier0/ReplayPipeline/ReplayOfflineConfiguration.py\r"
        expect "$ "

        send "DEST_FILE=/data/tier0/admin/ReplayOfflineConfiguration.py\r"
        expect "$ "

        send "cp \$SRC_FILE \$DEST_FILE\r"
        expect {
            "$ " { }
            timeout { puts "Timeout during file copy"; exit 1 }
        }

        send "export WMAGENT_TAG_VAR='$env(WMCORE_VERSION)'\r"
        expect "$ "

        send "export TIER0_VERSION_VAR='$env(T0_VERSION)'\r"
        expect "$ "

        send "export PYTHON_VERSION_VAR='$env(PYTHON_VERSION)'\r"
        expect "$ "

        send "source /data/tier0/ReplayPipeline/00_pypi_deploy_replay.sh\r"
        expect {
            "*Are you sure you wish to continue*" { 
                send "Y\r"
                exp_continue
            }
            -re ".*\\$ $" { }
            timeout { 
                puts "Script taking too long, but may still be running"
            }
        }

        send "start_agent\r"
        expect "$ "

        EOF