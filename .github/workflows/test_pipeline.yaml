# .github/workflows/vm-access.yml

name: Test Pipeline

on:
  # push:
  #   branches: [ "Pipeline" ]
  workflow_dispatch:          
    inputs:                  
      message1:               
        description: 'URL to download with wget'
        required: true         
        default: 'https://example.com/file.zip'
      message2:               
        description: 'WMCORE Version'
        required: false        
        default: '2.3.11.1'
      message3:               
        description: 'T0 Version'
        required: false        
        default: '3.3.3'
      message4:               
        description: 'Agent'
        required: false        
        default: 'Main'
      Patch:
        description: 'Choose one option to patch'
        required: true
        type: choice
        options:
        - 'Patch'
        - 'No Patch'
        default: 'No Patch'
      Replay:
        description: 'Choose the Replay'
        required: true
        type: choice
        options:
        - 'vocms047'
        - 'vocms0500'
        - 'vocms0501'
        default: 'vocms047'
      
      message5:
        description: 'Providing the link if it need to patch.'
        required: false        
        default: 'https://patch-diff.githubusercontent.com/raw/dmwm/T0/pull/5081.patch'


jobs:
  access-to-virtual-machine:
    runs-on: ubuntu-latest
    
    steps:
    - name: Install tools
      run: sudo apt-get update && sudo apt-get install -y expect
    
    - name: Access to virtual machine
      env:
        SERVER1_HOST: ${{ secrets.SERVER1_HOST }}
        SERVER1_USER: ${{ secrets.SERVER1_USER }}
        SERVER1_PASS: ${{ secrets.SERVER1_PASS }}
        SERVER2_HOST: ${{ secrets.SERVER2_HOST }}
        SERVER2_USER: ${{ secrets.SERVER2_USER }}
        SERVER2_PASS: ${{ secrets.SERVER2_PASS }}
        WGET_URL: ${{ github.event.inputs.message1 }} 
        REPLAY_OPTION: ${{ github.event.inputs.Replay }}  
        PATCH_OPTION: ${{ github.event.inputs.Patch }}        
        PATCH_URL: ${{ github.event.inputs.message5 }}
        WMCORE_VERSION : ${{ github.event.inputs.message2 }}
        T0_VERSION : ${{ github.event.inputs.message3 }}


      run: |
        # Method 1: Use expect to handle SSH password prompts
        expect << 'EOF'
        spawn ssh -o StrictHostKeyChecking=no $env(SERVER1_USER)@$env(SERVER1_HOST)
        expect "password:"
        send "$env(SERVER1_PASS)\r"
        expect "$ "
        send "ssh -o StrictHostKeyChecking=no $env(SERVER2_USER)@$env(SERVER2_HOST)\r"
        expect "password:"
        send "$env(SERVER2_PASS)\r"
        expect "$ "
        send "echo 'Connected to Server2' && hostname\r"
        expect "$ "
        send "alias\r"
        expect "$ "
        send "$env(REPLAY_OPTION)\r"
        expect "$ "
        send "ll\r"
        expect "$ "
        send "cd ohm\r"
        expect "$ "
        send "rm -f ReplayOfflineConfiguration.py\r"
        expect "$ "
        send "wget '$env(WGET_URL)'\r"
        expect "$ "
        send "ll\r"
        expect "$ "
        send "condor_rm -all\r"
        expect "$ "
        send "stop_agent\r"
        expect "$ "

        if {[string equal $env(PATCH_OPTION) "Patch"]} {
            send "echo 'Applying patch...'\r"
            expect "$ "
            send "curl '$env(PATCH_URL)' | patch -f -d $WMA_DEPLOY_DIR/lib/python3.9/site-packages/ -p 3\r"
            expect "$ "
            send "echo 'Patch downloaded'\r"
            expect "$ "
        } else {
            send "echo 'No patch requested, skipping...'\r"
            expect "$ "
        }
        send "rm -f /data/tier0/admin/ReplayOfflineConfiguration.py\r"
        expect "$ "
        send "SRC_FILE=/afs/cern.ch/user/c/cmst0/ohm/ReplayOfflineConfiguration.py\r"
        expect "$ "
        send "DEST_FILE=/data/tier0/admin/ReplayOfflineConfiguration.py\r"
        expect "$ "
        send "cp \$SRC_FILE \$DEST_FILE\r"
        expect {
            "$ " { }
            timeout { puts "Timeout during file copy"; exit 1 }
        }
        send "export WMAGENT_TAG_VAR='$env(WMCORE_VERSION)'\r"
        expect "$ "
        send "export TIER0_VERSION_VAR='$env(T0_VERSION)'\r"
        expect "$ "
        send "source /afs/cern.ch/user/c/cmst0/ohm/00_pypi_deploy_replay.sh\r"
        expect "$ "
        send "y\r"
        expect "$ "
        send "start_agent\r"
        expect "$ "

        EOF